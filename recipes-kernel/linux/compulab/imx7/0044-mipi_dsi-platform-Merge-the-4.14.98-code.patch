From 2a279a167bca2c3d9c393b10fcd048bb50c3c237 Mon Sep 17 00:00:00 2001
From: Valentin Raevsky <valentin@compulab.co.il>
Date: Thu, 8 Sep 2022 16:19:09 +0300
Subject: [PATCH 44/44] mipi_dsi: platform: Merge the 4.14.98 code

Signed-off-by: Valentin Raevsky <valentin@compulab.co.il>
---
 drivers/video/fbdev/mxc/mipi_dsi.h         |  48 +++---
 drivers/video/fbdev/mxc/mipi_dsi_samsung.c | 167 +++++++++++++++------
 2 files changed, 153 insertions(+), 62 deletions(-)

diff --git a/drivers/video/fbdev/mxc/mipi_dsi.h b/drivers/video/fbdev/mxc/mipi_dsi.h
index 270259c2e218..6cb106cadcd3 100644
--- a/drivers/video/fbdev/mxc/mipi_dsi.h
+++ b/drivers/video/fbdev/mxc/mipi_dsi.h
@@ -3,26 +3,6 @@
  * Copyright 2017 NXP.
  */
 
-/*
- * The code contained herein is licensed under the GNU General Public
- * License. You may obtain a copy of the GNU General Public License
- * Version 2 or later at the following locations:
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
-
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
-
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
 /*
  * The code contained herein is licensed under the GNU General Public
  * License. You may obtain a copy of the GNU General Public License
@@ -77,12 +57,21 @@ struct mipi_dsi_lcd_callback {
 	void (*get_mipi_lcd_videomode)(struct fb_videomode **, int *,
 			struct mipi_lcd_config **);
 	int  (*mipi_lcd_setup)(struct mipi_dsi_info *);
+	int  (*mipi_lcd_start)(struct mipi_dsi_info *);
+	int  (*mipi_lcd_stop)(struct mipi_dsi_info *);
+};
 
+struct mipi_dsi_host_timing {
+	u32 mipi_dsi_pllctrl_pms;
+	u32 mipi_dsi_phytiming;
+	u32 mipi_dsi_phytiming1;
+	u32 mipi_dsi_phytiming2;
 };
 
 struct mipi_dsi_match_lcd {
 	char *lcd_panel;
 	struct mipi_dsi_lcd_callback lcd_callback;
+	struct mipi_dsi_host_timing host_timing;
 };
 
 struct mipi_dsi_bus_mux {
@@ -129,6 +118,8 @@ struct mipi_dsi_info {
 	struct backlight_device		*bl;
 	/* callback for lcd panel operation */
 	struct mipi_dsi_lcd_callback	*lcd_callback;
+	/* mipi front end timings */
+	struct mipi_dsi_host_timing	*host_timing;
 
 	int (*mipi_dsi_pkt_read)(struct mipi_dsi_info *mipi,
 			u8 data_type, u32 *buf, int len);
@@ -164,4 +155,21 @@ void mipid_rm68191_get_lcd_videomode(struct fb_videomode **mode, int *size,
 int mipid_rm68191_lcd_setup(struct mipi_dsi_info *mipi_dsi);
 #endif
 
+#ifdef CONFIG_FB_MXC_SN65DSI8X
+void sn65dsi83_get_lcd_videomode(struct fb_videomode **mode, int *size,
+				 struct mipi_lcd_config **data);
+int sn65dsi83_lcd_setup(struct mipi_dsi_info *mipi_dsi);
+int sn65dsi83_lcd_start(struct mipi_dsi_info *mipi_dsi);
+int sn65dsi83_lcd_stop(struct mipi_dsi_info *mipi_dsi);
+#endif /* CONFIG_FB_MXC_SN65DSI8X */
+
+#if	!defined(CONFIG_FB_MXC_TRULY_WVGA_SYNC_PANEL)  && \
+	!defined(CONFIG_FB_MXC_TRULY_PANEL_TFT3P5079E) && \
+	!defined(CONFIG_FB_MXC_TRULY_PANEL_TFT3P5581E) && \
+	!defined(CONFIG_FB_MXC_RK_PANEL_RK055AHD042) && \
+	!defined(CONFIG_FB_MXC_RK_PANEL_RK055IQH042) && \
+	!defined(CONFIG_FB_MXC_SN65DSI8X)
+#error "Please configure MIPI LCD panel, we cannot find one!"
+#endif
+
 #endif
diff --git a/drivers/video/fbdev/mxc/mipi_dsi_samsung.c b/drivers/video/fbdev/mxc/mipi_dsi_samsung.c
index e5caebb5e355..bff8b90e6e8d 100644
--- a/drivers/video/fbdev/mxc/mipi_dsi_samsung.c
+++ b/drivers/video/fbdev/mxc/mipi_dsi_samsung.c
@@ -53,20 +53,85 @@
 static struct mipi_dsi_match_lcd mipi_dsi_lcd_db[] = {
 #ifdef CONFIG_FB_MXC_TRULY_WVGA_SYNC_PANEL
 	{
-	 "TRULY-WVGA",
-	 {mipid_hx8369_get_lcd_videomode, mipid_hx8369_lcd_setup}
+		"TRULY-WVGA",
+		{
+			mipid_hx8369_get_lcd_videomode,
+			mipid_hx8369_lcd_setup,
+			NULL, NULL
+		},
+		{
+			MIPI_DSI_PMS(0x4190),
+			(MIPI_DSI_M_TLPXCTL(11) | MIPI_DSI_M_THSEXITCTL(18)),
+			(MIPI_DSI_M_TCLKPRPRCTL(13) |
+			 MIPI_DSI_M_TCLKZEROCTL(65) |
+			 MIPI_DSI_M_TCLKPOSTCTL(17) |
+			 MIPI_DSI_M_TCLKTRAILCTL(13)),
+			(MIPI_DSI_M_THSPRPRCTL(16) | MIPI_DSI_M_THSZEROCTL(24) |
+			 MIPI_DSI_M_THSTRAILCTL(16))
+		}
 	},
 #endif
 #ifdef CONFIG_FB_MXC_TRULY_PANEL_TFT3P5079E
 	{
-	 "TRULY-WVGA-TFT3P5079E",
-	 {mipid_otm8018b_get_lcd_videomode, mipid_otm8018b_lcd_setup}
+		"TRULY-WVGA-TFT3P5079E",
+		{
+			mipid_otm8018b_get_lcd_videomode,
+			mipid_otm8018b_lcd_setup,
+			NULL, NULL
+
+		},
+		{
+			MIPI_DSI_PMS(0x4190),
+			(MIPI_DSI_M_TLPXCTL(11) | MIPI_DSI_M_THSEXITCTL(18)),
+			(MIPI_DSI_M_TCLKPRPRCTL(13) |
+			 MIPI_DSI_M_TCLKZEROCTL(65) |
+			 MIPI_DSI_M_TCLKPOSTCTL(17) |
+			 MIPI_DSI_M_TCLKTRAILCTL(13)),
+			(MIPI_DSI_M_THSPRPRCTL(16) | MIPI_DSI_M_THSZEROCTL(24) |
+			 MIPI_DSI_M_THSTRAILCTL(16))
+		}
 	},
 #endif
 #ifdef CONFIG_FB_MXC_TRULY_PANEL_TFT3P5581E
 	{
-	 "TRULY-WVGA-TFT3P5581E",
-	 {mipid_hx8363_get_lcd_videomode, mipid_hx8363_lcd_setup}
+		"TRULY-WVGA-TFT3P5581E",
+		{
+			mipid_hx8363_get_lcd_videomode,
+			mipid_hx8363_lcd_setup,
+			NULL, NULL
+		},
+		{
+			MIPI_DSI_PMS(0x3141),
+			(MIPI_DSI_M_TLPXCTL(2) | MIPI_DSI_M_THSEXITCTL(4)),
+			(MIPI_DSI_M_TCLKPRPRCTL(5) |
+			 MIPI_DSI_M_TCLKZEROCTL(14) |
+			 MIPI_DSI_M_TCLKPOSTCTL(8) |
+			 MIPI_DSI_M_TCLKTRAILCTL(3)),
+			(MIPI_DSI_M_THSPRPRCTL(3) | MIPI_DSI_M_THSZEROCTL(3) |
+			 MIPI_DSI_M_THSTRAILCTL(3))
+		}
+	},
+#endif
+#ifdef CONFIG_FB_MXC_SN65DSI8X
+	{
+		"SN65DSI_default",
+		{
+			sn65dsi83_get_lcd_videomode,
+			sn65dsi83_lcd_setup,
+			sn65dsi83_lcd_start,
+			sn65dsi83_lcd_stop
+		},
+		{
+			MIPI_DSI_PMS(0x4268),
+			(MIPI_DSI_M_TLPXCTL(3) | MIPI_DSI_M_THSEXITCTL(5)),
+			(MIPI_DSI_M_TCLKPRPRCTL(3) |
+			 MIPI_DSI_M_TCLKZEROCTL(20) |
+			 MIPI_DSI_M_TCLKPOSTCTL(9) |
+			 MIPI_DSI_M_TCLKTRAILCTL(4)),
+			(MIPI_DSI_M_THSPRPRCTL(5) |
+			 MIPI_DSI_M_THSZEROCTL(6) |
+			 MIPI_DSI_M_THSTRAILCTL(7))
+		}
 	},
 #endif
 	{
@@ -84,9 +149,11 @@ enum mipi_dsi_trans_mode {
 	DSI_HS_MODE
 };
 
+static struct regulator *mipi_phy_reg;
 static DECLARE_COMPLETION(dsi_rx_done);
 static DECLARE_COMPLETION(dsi_tx_done);
 
+static void mipi_dsi_dphy_power_down(void);
 static void mipi_dsi_set_mode(struct mipi_dsi_info *mipi_dsi,
 			      enum mipi_dsi_trans_mode mode);
 
@@ -103,6 +170,8 @@ static int mipi_dsi_lcd_init(struct mipi_dsi_info *mipi_dsi,
 			mipi_dsi_lcd_db[i].lcd_panel)) {
 			mipi_dsi->lcd_callback =
 				&mipi_dsi_lcd_db[i].lcd_callback;
+			mipi_dsi->host_timing =
+				&mipi_dsi_lcd_db[i].host_timing;
 			break;
 		}
 	}
@@ -338,6 +407,24 @@ static void mipi_dsi_power_off(struct mxc_dispdrv_handle *disp)
 	clk_disable_unprepare(mipi_dsi->cfg_clk);
 }
 
+static void mipi_dsi_dphy_power_on(struct platform_device *pdev)
+{
+	int ret;
+
+	regulator_set_voltage(mipi_phy_reg, 1000000, 1000000);
+
+	ret = regulator_enable(mipi_phy_reg);
+	if (ret){
+		dev_err(&pdev->dev, "failed to enable mipi phy regulatore\n");
+		BUG_ON(1);
+	}
+}
+
+static void mipi_dsi_dphy_power_down(void)
+{
+	regulator_disable(mipi_phy_reg);
+}
+
 static int mipi_dsi_lane_stop_state(struct mipi_dsi_info *mipi_dsi)
 {
 	unsigned int reg;
@@ -377,12 +464,8 @@ static int mipi_dsi_master_init(struct mipi_dsi_info *mipi_dsi,
 	       MIPI_DSI_PLL_BYPASS(0) |
 	       MIPI_DSI_BYTE_CLK_SRC(0),
 	       mipi_dsi->mmio_base + MIPI_DSI_CLKCTRL);
-	if (!strcmp(mipi_dsi->lcd_panel, "TRULY-WVGA-TFT3P5581E"))
-		writel(MIPI_DSI_PLL_EN(1) | MIPI_DSI_PMS(0x3141),
-		       mipi_dsi->mmio_base + MIPI_DSI_PLLCTRL);
-	else
-		writel(MIPI_DSI_PLL_EN(1) | MIPI_DSI_PMS(0x4190),
-		       mipi_dsi->mmio_base + MIPI_DSI_PLLCTRL);
+	writel(MIPI_DSI_PLL_EN(1) | mipi_dsi->host_timing->mipi_dsi_pllctrl_pms,
+	       mipi_dsi->mmio_base + MIPI_DSI_PLLCTRL);
 
 	/* set PLLTMR: stable time */
 	writel(33024, mipi_dsi->mmio_base + MIPI_DSI_PLLTMR);
@@ -438,31 +521,12 @@ static int mipi_dsi_master_init(struct mipi_dsi_info *mipi_dsi,
 	       mipi_dsi->mmio_base + MIPI_DSI_MSYNC);
 
 	/* configure d-phy timings */
-	if (!strcmp(mipi_dsi->lcd_panel, "TRULY-WVGA-TFT3P5581E")) {
-		writel(MIPI_DSI_M_TLPXCTL(2) | MIPI_DSI_M_THSEXITCTL(4),
-			mipi_dsi->mmio_base + MIPI_DSI_PHYTIMING);
-		writel(MIPI_DSI_M_TCLKPRPRCTL(5) |
-			MIPI_DSI_M_TCLKZEROCTL(14) |
-			MIPI_DSI_M_TCLKPOSTCTL(8) |
-			MIPI_DSI_M_TCLKTRAILCTL(3),
-			mipi_dsi->mmio_base + MIPI_DSI_PHYTIMING1);
-		writel(MIPI_DSI_M_THSPRPRCTL(3) |
-			MIPI_DSI_M_THSZEROCTL(3) |
-			MIPI_DSI_M_THSTRAILCTL(3),
-			mipi_dsi->mmio_base + MIPI_DSI_PHYTIMING2);
-	} else {
-		writel(MIPI_DSI_M_TLPXCTL(11) | MIPI_DSI_M_THSEXITCTL(18),
-			mipi_dsi->mmio_base + MIPI_DSI_PHYTIMING);
-		writel(MIPI_DSI_M_TCLKPRPRCTL(13) |
-			MIPI_DSI_M_TCLKZEROCTL(65) |
-			MIPI_DSI_M_TCLKPOSTCTL(17) |
-			MIPI_DSI_M_TCLKTRAILCTL(13),
-			mipi_dsi->mmio_base + MIPI_DSI_PHYTIMING1);
-		writel(MIPI_DSI_M_THSPRPRCTL(16) |
-			MIPI_DSI_M_THSZEROCTL(24) |
-			MIPI_DSI_M_THSTRAILCTL(16),
-			mipi_dsi->mmio_base + MIPI_DSI_PHYTIMING2);
-	}
+	writel(mipi_dsi->host_timing->mipi_dsi_phytiming,
+		mipi_dsi->mmio_base + MIPI_DSI_PHYTIMING);
+	writel(mipi_dsi->host_timing->mipi_dsi_phytiming1,
+		mipi_dsi->mmio_base + MIPI_DSI_PHYTIMING1);
+	writel(mipi_dsi->host_timing->mipi_dsi_phytiming2,
+		mipi_dsi->mmio_base + MIPI_DSI_PHYTIMING2);
 
 	writel(0xf000f, mipi_dsi->mmio_base + MIPI_DSI_TIMEOUT);
 
@@ -615,6 +679,11 @@ static int mipi_dsi_enable(struct mxc_dispdrv_handle *disp,
 
 	mipi_dsi_set_main_standby(mipi_dsi, 1);
 
+	if (mipi_dsi->lcd_callback->mipi_lcd_start) {
+		msleep(120);
+		mipi_dsi->lcd_callback->mipi_lcd_start(mipi_dsi);
+	}
+
 	return 0;
 }
 
@@ -634,9 +703,12 @@ static void mipi_dsi_disable(struct mxc_dispdrv_handle *disp,
 
 		if (mipi_dsi->disp_power_on)
 			regulator_disable(mipi_dsi->disp_power_on);
-
-		mipi_dsi->lcd_inited = 0;
 	}
+
+	if (mipi_dsi->lcd_callback->mipi_lcd_stop)
+		mipi_dsi->lcd_callback->mipi_lcd_stop(mipi_dsi);
+
+	mipi_dsi->lcd_inited = 0;
 }
 
 static int mipi_dsi_setup(struct mxc_dispdrv_handle *disp,
@@ -779,6 +851,12 @@ static int mipi_dsi_probe(struct platform_device *pdev)
 		return ret;
 	}
 
+	mipi_phy_reg = devm_regulator_get(&pdev->dev, "mipi-phy");
+	if (IS_ERR(mipi_phy_reg)) {
+		dev_err(&pdev->dev, "mipi phy power supply not found\n");
+		return ret;
+	}
+
 	mipi_dsi->disp_power_on = devm_regulator_get(&pdev->dev,
 						"disp-power-on");
 	if (!IS_ERR(mipi_dsi->disp_power_on)) {
@@ -804,9 +882,9 @@ static int mipi_dsi_probe(struct platform_device *pdev)
 		goto dispdrv_reg_fail;
 	}
 
-	mipi_dsi->mipi_dsi_pkt_read  = mipi_dsi_pkt_read;
-	mipi_dsi->mipi_dsi_pkt_write = mipi_dsi_pkt_write;
-	mipi_dsi->mipi_dsi_dcs_cmd   = mipi_dsi_dcs_cmd;
+        mipi_dsi->mipi_dsi_pkt_read  = mipi_dsi_pkt_read;
+        mipi_dsi->mipi_dsi_pkt_write = mipi_dsi_pkt_write;
+        mipi_dsi->mipi_dsi_dcs_cmd   = mipi_dsi_dcs_cmd;
 
 	pm_runtime_enable(&pdev->dev);
 
@@ -814,6 +892,8 @@ static int mipi_dsi_probe(struct platform_device *pdev)
 	dev_set_drvdata(&pdev->dev, mipi_dsi);
 
 	dev_info(&pdev->dev, "i.MX MIPI DSI driver probed\n");
+	ret = 0;
+
 	return ret;
 
 dispdrv_reg_fail:
@@ -830,6 +910,7 @@ static void mipi_dsi_shutdown(struct platform_device *pdev)
 	struct mipi_dsi_info *mipi_dsi = dev_get_drvdata(&pdev->dev);
 
 	mipi_dsi_power_off(mipi_dsi->disp_mipi);
+	mipi_dsi_dphy_power_down();
 }
 
 static int mipi_dsi_remove(struct platform_device *pdev)
@@ -857,6 +938,7 @@ static int mipi_dsi_runtime_suspend(struct device *dev)
 		release_bus_freq(BUS_FREQ_HIGH);
 		dev_dbg(dev, "mipi dsi busfreq high release.\n");
 
+		mipi_dsi_dphy_power_down();
 		mipi_dsi->dsi_power_on = 0;
 	}
 
@@ -872,6 +954,7 @@ static int mipi_dsi_runtime_resume(struct device *dev)
 		request_bus_freq(BUS_FREQ_HIGH);
 		dev_dbg(dev, "mipi dsi busfreq high request.\n");
 
+		mipi_dsi_dphy_power_on(pdev);
 		mipi_dsi->dsi_power_on = 1;
 	}
 
-- 
2.17.1

